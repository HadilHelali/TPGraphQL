type Query {
    getToDos: [Todo!] ,
    getTodoById(id: Int): Todo!
    getUsers: [User]!
    getUserById(id: Int): User!
    }

    enum TodoStatus{
        WAITING
        IN_PROGRESS
        CANCELED
        DONE
    }

    type TodoSubscriptioPayload {
    todo: Todo!
    mutation: MutationOperationType!
    }

    type Subscription {
    persistTodo: TodoSubscriptioPayload!
    }

    enum MutationOperationType {
     UPDATE
     DELETE
     ADD
    }

    input AddTodoInput {
    name: String!,
    content:String!,
    userId: Int!
    }

    input ModifTodoInput {
    name: String,
    content:String,
    status:TodoStatus,
    userId: Int
    }

    type Todo {
        id: ID!,
        name:String!,
        content:String!,
        status:TodoStatus!,
        user: User
    }

    type User {
        id: ID!,
        name:String!,
        email:String!,
        todos:[Todo!]
    }

    type Mutation {
        addTodo(addTodoInput: AddTodoInput ): Todo!,
        modifTodo(id: Int , modifTodoInput: ModifTodoInput ): Todo,
        deleteTodo(TodoId: Int): Todo
    }


    